/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        tap_hold: tap_preferred_hold_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED_HOLD_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lth: layer_toggle_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TOGGLE_HOLD";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEWROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEWROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hml_b: homerow_mods_balanced_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_BALANCED_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <0>;
        };

        hmr_b: homerow_mods_balanced_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_BALANCED_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <0>;
        };

        hml_i: homerow_mods_interrupted_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_INTERRUPTED_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <200>;
        };

        hmr_i: homerow_mods_interrupted_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_INTERRUPTED_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <200>;
        };

        hml_urob: homerow_mods_urob_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_UROB_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hmr_urob: homerow_mods_urob_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_UROB_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        td_q_grave: tap_dance_q_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Q_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp GRAVE>;

            tapping-term-ms = <250>;
        };

        td_ctrl_shift: tap_dance_st_ctrl_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ST_CTRL_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&sk LEFT_CONTROL>, <&sk LS(LEFT_CONTROL)>;
        };

        td_alt_shift: tap_dance_st_alt_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ST_ALT_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&sk LEFT_ALT>, <&sk LS(LEFT_ALT)>;
        };

        st_t_h: sticky_tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP_HOLD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_ru_question {
            bindings = <&kp AMPERSAND>;
            key-positions = <34 33>;
            layers = <0>;
        };

        combo_ru_quotes {
            bindings = <&kp AT>;
            key-positions = <22 21>;
            layers = <0>;
        };

        combo_ru_colon {
            bindings = <&kp CARET>;
            key-positions = <32 33>;
            layers = <0>;
        };

        combo_home {
            bindings = <&kp HOME>;
            key-positions = <8 7>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <8 9>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <9 10>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <20 21>;
        };

        combo_repeat {
            bindings = <&key_repeat>;
            key-positions = <15 16>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <15 14>;
        };

        combo_page_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <2 3>;
        };

        combo_page_down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <26 27>;
        };

        combo_exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 2>;
            layers = <0>;
        };

        combo_gui_oneside {
            bindings = <&kp LEFT_GUI>;
            key-positions = <12 13>;
        };

        combo_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <24 25>;
        };

        combo_gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <12 23>;
        };

        combo_ctrl-shift {
            bindings = <&sk LS(LEFT_CONTROL)>;
            key-positions = <37 36>;
        };
    };

    macros {
        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ALT_TAB";
        };

        /*
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
        */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE                   &kp Q  &kp W  &kp E                 &kp R             &kp T        &kp Y      &kp U              &kp I          &kp O    &kp P     &tap_hold RIGHT_BRACKET LEFT_BRACKET
&alt_tab                    &kp A  &kp S  &kp D                 &kp F             &kp G        &kp H      &kp J              &kp K          &kp L    &kp SEMI  &kp SQT
&mt LSHFT LEFT_PARENTHESIS  &kp Z  &kp X  &kp C                 &kp V             &kp B        &kp N      &kp M              &kp COMMA      &kp DOT  &kp FSLH  &mt LEFT_SHIFT RIGHT_PARENTHESIS
                                          &mt LEFT_CONTROL TAB  &lt 1 LEFT_BRACE  &kp SPACE    &kp ENTER  &lt 2 RIGHT_BRACE  &kp BACKSPACE
            >;
        };

        left {
            display-name = "left";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE      &kp HOME      &kp PAGE_UP   &kp PAGE_DOWN   &kp END           &kp SPACE          &kp N6         &kp N7     &kp N8  &kp N9     &kp MINUS  &kp PLUS
&kp DELETE      &sk LEFT_GUI  &sk LEFT_ALT  &sk LEFT_SHIFT  &sk LEFT_CONTROL  &kp ENTER          &kp LEFT       &kp DOWN   &kp UP  &kp RIGHT  &kp N0     &kp STAR
&kp LS(DELETE)  &kp LEFT      &kp UP        &kp DOWN        &kp RIGHT_ARROW   &kp PRINTSCREEN    &kp N1         &kp N2     &kp N3  &kp N4     &kp N5     &kp FSLH
                                            &none           &none             &none              &kp LG(SPACE)  &kp EQUAL  &trans
            >;
        };

        right {
            display-name = "right";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1          &kp F2           &kp F3       &kp F4        &kp F5         &kp F6           &kp F7    &kp F8         &kp F9       &kp F10    &kp F11     &kp F12
&caps_word      &kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR     &kp PERCENT      &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans      &trans
&studio_unlock  &kp BACKSLASH    &kp PIPE     &kp ASTERISK  &kp AMPERSAND  &kp CARET        &trans    &kp PAGE_DOWN  &kp PAGE_UP  &trans     &kp LA(F4)  &kp K_POWER
                                              &kp TAB       &mo 3          &kp LG(SPACE)    &trans    &none          &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans      &trans          &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans  &trans
&trans  &trans      &trans          &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans  &trans
&trans  &bt BT_CLR  &bt BT_CLR_ALL  &trans  &trans  &trans    &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &trans  &trans
                                    &trans  &trans  &trans    &trans  &trans        &trans
            >;

            label = "blt";
        };
    };
};
