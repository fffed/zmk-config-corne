/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        tap_hold: tap_preferred_hold_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED_HOLD_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lth: layer_toggle_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TOGGLE_HOLD";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEWROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEWROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hml_b: homerow_mods_balanced_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_BALANCED_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <0>;
        };

        hmr_b: homerow_mods_balanced_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_BALANCED_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <0>;
        };

        hml_i: homerow_mods_interrupted_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_INTERRUPTED_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <200>;
        };

        hmr_i: homerow_mods_interrupted_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_INTERRUPTED_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <200>;
        };

        hml_urob: homerow_mods_urob_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_UROB_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hmr_urob: homerow_mods_urob_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_UROB_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        td_q_grave: tap_dance_q_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Q_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp GRAVE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_ru_question {
            bindings = <&kp AMPERSAND>;
            key-positions = <34 33>;
            layers = <0>;
        };

        combo_ru_quotes {
            bindings = <&kp AT>;
            key-positions = <22 21>;
            layers = <0>;
        };

        combo_ru_colon {
            bindings = <&kp CARET>;
            key-positions = <32 33>;
            layers = <0>;
        };

        combo_home {
            bindings = <&kp HOME>;
            key-positions = <8 9 7>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <31 32 33>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <1 2>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20 21>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21 22>;
        };
    };

    macros {
        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ALT_TAB";
        };

        /*
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
        */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&alt_tab                    &tap_hold GRAVE Q  &kp W  &kp E             &kp R      &kp T        &kp Y    &kp U        &kp I                         &kp O    &kp P     &tap_hold RIGHT_BRACKET LEFT_BRACKET
&tap_hold LEFT_GUI ESCAPE   &kp A              &kp S  &kp D             &kp F      &kp G        &kp H    &kp J        &kp K                         &kp L    &kp SEMI  &kp SQT
&mt LSHFT LEFT_PARENTHESIS  &kp Z              &kp X  &kp C             &kp V      &kp B        &kp N    &kp M        &kp COMMA                     &kp DOT  &kp FSLH  &mt LEFT_SHIFT RIGHT_PARENTHESIS
                                                      &sk LEFT_CONTROL  &lt 1 TAB  &kp SPACE    &kp RET  &lt 2 SPACE  &tap_hold LEFT_ALT BACKSPACE
            >;
        };

        left {
            display-name = "left";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE         &kp EXCLAMATION          &kp AT_SIGN         &kp HASH               &kp DOLLAR                   &kp PERCENT              &kp FSLH      &kp N7                &kp N8            &kp N9  &kp MINUS   &kp PLUS
&caps_word        &hml LEFT_GUI BACKSLASH  &hml LEFT_ALT PIPE  &hml LEFT_SHIFT CARET  &hml LEFT_CONTROL AMPERSAND  &kp UNDERSCORE           &kp ASTERISK  &kp N4                &kp N5            &kp N6  &kp EQUAL   &sk LS(LEFT_CONTROL)
&kp LEFT_BRACKET  &kp RIGHT_BRACKET        &kp LEFT_BRACE      &kp RIGHT_BRACE        &kp LEFT_PARENTHESIS         &kp RIGHT_PARENTHESIS    &kp N0        &kp N1                &kp N2            &kp N3  &kp KP_DOT  &sk LS(LEFT_ALT)
                                                               &trans                 &none                        &trans                   &trans        &sk LS(LEFT_CONTROL)  &sk LS(LEFT_ALT)
            >;
        };

        right {
            display-name = "right";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1          &kp F2    &kp F3    &kp F4        &kp F5        &kp F6             &kp F7      &kp F8         &kp F9          &kp F10    &kp F11  &kp F12
&alt_tab        &sk LGUI  &sk LALT  &sk LSHFT     &sk LCTRL     &kp PRINTSCREEN    &kp LEFT    &kp DOWN       &kp UP          &kp RIGHT  &trans   &trans
&studio_unlock  &trans    &trans    &bt BT_SEL 3  &bt BT_SEL 1  &bt BT_SEL 0       &kp HOME    &kp PAGE_DOWN  &kp PAGE_UP     &kp END    &trans   &kp K_POWER
                                    &trans        &trans        &trans             &bt BT_CLR  &none          &bt BT_CLR_ALL
            >;
        };

        gui {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans           &trans      &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans           &trans      &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans           &kp LG(N0)  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &trans  &trans
                        &trans  &trans  &kp LG(SPACE)    &trans      &trans      &trans
            >;
        };
    };
};
